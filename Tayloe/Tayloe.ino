
#include <si5351.h>
#include <Encoder.h>
#include <Audio.h>
#include <Wire.h>
#include <SerialFlash.h>
#include <U8x8lib.h>
#include <Bounce2.h>

Bounce changeBand = Bounce();
int oldBand = 1;
int activeBand = 0;

Bounce changeRadix = Bounce();
int oldRadix = 1;

Si5351 si5351;

AudioInputI2S            audioInput;
AudioFilterFIR           plus45;
AudioFilterFIR           minus45;
AudioOutputI2S           audioOutput;
AudioMixer4              mixer;
AudioAmplifier           amp;
AudioConnection          patchCord1(audioInput, 0, plus45, 0);
AudioConnection          patchCord2(audioInput, 1, minus45, 0);
AudioConnection          patchCord3(plus45, 0, mixer, 0);
AudioConnection          patchCord4(minus45, 0, mixer, 1);
//AudioConnection          patchCord5( mixer, amp );
AudioConnection          patchCord6( mixer, 0, audioOutput, 0 );
AudioConnection          patchCord7( mixer, 0, audioOutput, 1 );

AudioControlSGTL5000     sgtl5000_1;

U8X8_SSD1306_128X32_UNIVISION_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);   // Adafruit ESP8266/32u4/ARM Boards + FeatherWing OLED

#define NUM_COEFFS 160
short plus45Coeffs[] = 
{
32768 * 85.72623910271280E-9,
 32768 * 360.3162611526590E-9,
 32768 * 837.3757902950490E-9,
 32768 * 1.509095198610110E-6,
 32768 * 2.346388649814720E-6,
 32768 * 3.307737640558380E-6,
 32768 * 4.356361076096290E-6,
 32768 * 5.482664216555570E-6,
 32768 * 6.726467770602200E-6,
 32768 * 8.191985253746750E-6,
 32768 * 0.000010048512760360,
 32768 * 0.000012511679326999,
 32768 * 0.000015803848788175,
 32768 * 0.000020097377056567,
 32768 * 0.000025449985498164,
 32768 * 0.000031746271051827,
 32768 * 0.000038662001548108,
 32768 * 0.000045667192682973,
 32768 * 0.000052079368355832,
 32768 * 0.000057169940256408,
 32768 * 0.000060315253051647,
 32768 * 0.000061171333691145,
 32768 * 0.000059840218384045,
 32768 * 0.000056988646083057,
 32768 * 0.000053879404156667,
 32768 * 0.000052283389470939,
 32768 * 0.000054256886673265,
 32768 * 0.000061792371041567,
 32768 * 0.000076379252403441,
 32768 * 0.000098538788403406,
 32768 * 0.000127419345527896,
 32768 * 0.000160548616877044,
 32768 * 0.000193833620412524,
 32768 * 0.000221874643623989,
 32768 * 0.000238616059705401,
 32768 * 0.000238298892089618,
 32768 * 0.000216614422927095,
 32768 * 0.000171895191538743,
 32768 * 0.000106131238080704,
 32768 * 0.000025577166652023,
32768 * -0.000059270828489341,
32768 * -0.000134493912294033,
32768 * -0.000184435540147591,
32768 * -0.000194192603135502,
32768 * -0.000152703473123175,
32768 * -0.000056074230271610,
 32768 * 0.000089341296246745,
 32768 * 0.000264669719892746,
 32768 * 0.000437625073319674,
 32768 * 0.000563490024849667,
 32768 * 0.000588303656370483,
 32768 * 0.000454344728610855,
 32768 * 0.000107696369669775,
32768 * -0.000492652021381409,
32768 * -0.001365025935321017,
32768 * -0.002495726881850954,
32768 * -0.003831403853944198,
32768 * -0.005274420013504736,
32768 * -0.006682353096064969,
32768 * -0.007872457225367236,
32768 * -0.008631456140942450,
32768 * -0.008730471861073915,
32768 * -0.007944275329040100,
32768 * -0.006073446087035113,
32768 * -0.002967520887833168,
 32768 * 0.001453133334156885,
 32768 * 0.007179111665529037,
 32768 * 0.014099688307883574,
 32768 * 0.021998326203460809,
 32768 * 0.030557215724125068,
 32768 * 0.039371262046901112,
 32768 * 0.047971016813847515,
 32768 * 0.055853114667814688,
 32768 * 0.062515932257669729,
 32768 * 0.067497534188050309,
 32768 * 0.070412588022700728,
 32768 * 0.070984872429081983,
 32768 * 0.069072287853835471,
 32768 * 0.064681888741221161,
 32768 * 0.057973334396581491,
 32768 * 0.049250215048654136,
 32768 * 0.038939841584499084,
 32768 * 0.027563173361955157,
 32768 * 0.015697483940675688,
 32768 * 0.003935032111380991,
32768 * -0.007158653879088299,
32768 * -0.017083290529425255,
32768 * -0.025435936278132561,
32768 * -0.031934137555959780,
32768 * -0.036428501396860206,
32768 * -0.038904113567691565,
32768 * -0.039471279479773053,
32768 * -0.038347029894484068,
32768 * -0.035829608304000622,
32768 * -0.032268670213432174,
32768 * -0.028034136549708617,
32768 * -0.023486549185123110,
32768 * -0.018951404989680197,
32768 * -0.014699353531286314,
32768 * -0.010933410643086474,
32768 * -0.007783553997826839,
32768 * -0.005308315479728713,
32768 * -0.003502345828037885,
32768 * -0.002308458276264694,
32768 * -0.001632394139532800,
32768 * -0.001358502737476679,
32768 * -0.001364673976164711,
32768 * -0.001535166878161881,
32768 * -0.001770389450790979,
32768 * -0.001993145752631055,
32768 * -0.002151316928598101,
32768 * -0.002217334124400999,
32768 * -0.002185095323304315,
32768 * -0.002065154111079655,
32768 * -0.001879061850637623,
32768 * -0.001653686816840828,
32768 * -0.001416187742254716,
32768 * -0.001190115921523082,
32768 * -0.000992893299731004,
32768 * -0.000834695743732478,
32768 * -0.000718587143106437,
32768 * -0.000641618924295427,
32768 * -0.000596539262993292,
32768 * -0.000573745738812709,
32768 * -0.000563155581830094,
32768 * -0.000555744741330688,
32768 * -0.000544603801835587,
32768 * -0.000525458384222233,
32768 * -0.000496689621051623,
32768 * -0.000458956190169146,
32768 * -0.000414557756778509,
32768 * -0.000366689963325495,
32768 * -0.000318726977880632,
32768 * -0.000273635704371260,
32768 * -0.000233584209262982,
32768 * -0.000199763888436751,
32768 * -0.000172407318909836,
32768 * -0.000150956459385682,
32768 * -0.000134321240329720,
32768 * -0.000121166543042160,
32768 * -0.000110174028501483,
32768 * -0.000100240837338182,
32768 * -0.000090595898283883,
32768 * -0.000080832712018720,
32768 * -0.000070872067709421,
32768 * -0.000060877395227670,
32768 * -0.000051148804542177,
32768 * -0.000042019890203652,
32768 * -0.000033775487350486,
32768 * -0.000026600596258099,
32768 * -0.000020562516461486,
32768 * -0.000015621408610826,
32768 * -0.000011660050510091,
32768 * -8.521856091049470E-6,
32768 * -6.047068856324060E-6,
32768 * -4.099758217988450E-6,
32768 * -2.581924617226260E-6,
32768 * -1.434716436076140E-6,
32768 * -629.7005415999500E-9,
32768 * -154.8226000895350E-9
};


short minus45Coeffs[NUM_COEFFS] = 
{
32768 * -154.8226000895390E-9,
32768 * -629.7005415999670E-9,
32768 * -1.434716436076180E-6,
32768 * -2.581924617226300E-6,
32768 * -4.099758217988490E-6,
32768 * -6.047068856324040E-6,
32768 * -8.521856091049360E-6,
32768 * -0.000011660050510090,
32768 * -0.000015621408610826,
32768 * -0.000020562516461485,
32768 * -0.000026600596258098,
32768 * -0.000033775487350485,
32768 * -0.000042019890203651,
32768 * -0.000051148804542176,
32768 * -0.000060877395227669,
32768 * -0.000070872067709420,
32768 * -0.000080832712018720,
32768 * -0.000090595898283883,
32768 * -0.000100240837338183,
32768 * -0.000110174028501485,
32768 * -0.000121166543042162,
32768 * -0.000134321240329721,
32768 * -0.000150956459385683,
32768 * -0.000172407318909836,
32768 * -0.000199763888436750,
32768 * -0.000233584209262980,
32768 * -0.000273635704371256,
32768 * -0.000318726977880628,
32768 * -0.000366689963325491,
32768 * -0.000414557756778506,
32768 * -0.000458956190169144,
32768 * -0.000496689621051623,
32768 * -0.000525458384222235,
32768 * -0.000544603801835590,
32768 * -0.000555744741330692,
32768 * -0.000563155581830097,
32768 * -0.000573745738812708,
32768 * -0.000596539262993284,
32768 * -0.000641618924295410,
32768 * -0.000718587143106408,
32768 * -0.000834695743732437,
32768 * -0.000992893299730952,
32768 * -0.001190115921523022,
32768 * -0.001416187742254653,
32768 * -0.001653686816840770,
32768 * -0.001879061850637580,
32768 * -0.002065154111079636,
32768 * -0.002185095323304326,
32768 * -0.002217334124401045,
32768 * -0.002151316928598183,
32768 * -0.001993145752631164,
32768 * -0.001770389450791099,
32768 * -0.001535166878161991,
32768 * -0.001364673976164776,
32768 * -0.001358502737476664,
32768 * -0.001632394139532662,
32768 * -0.002308458276264394,
32768 * -0.003502345828037389,
32768 * -0.005308315479727996,
32768 * -0.007783553997825893,
32768 * -0.010933410643085312,
32768 * -0.014699353531284964,
32768 * -0.018951404989678729,
32768 * -0.023486549185121608,
32768 * -0.028034136549707177,
32768 * -0.032268670213430932,
32768 * -0.035829608303999672,
32768 * -0.038347029894483561,
32768 * -0.039471279479773101,
32768 * -0.038904113567692238,
32768 * -0.036428501396861553,
32768 * -0.031934137555961840,
32768 * -0.025435936278135281,
32768 * -0.017083290529428565,
32768 * -0.007158653879092086,
 32768 * 0.003935032111376892,
 32768 * 0.015697483940671456,
 32768 * 0.027563173361950997,
 32768 * 0.038939841584495198,
 32768 * 0.049250215048650715,
 32768 * 0.057973334396578695,
 32768 * 0.064681888741219121,
 32768 * 0.069072287853834263,
 32768 * 0.070984872429081664,
 32768 * 0.070412588022701256,
 32768 * 0.067497534188051586,
 32768 * 0.062515932257671672,
 32768 * 0.055853114667817151,
 32768 * 0.047971016813850326,
 32768 * 0.039371262046904110,
 32768 * 0.030557215724128069,
 32768 * 0.021998326203463668,
 32768 * 0.014099688307886164,
 32768 * 0.007179111665531264,
 32768 * 0.001453133334158685,
32768 * -0.002967520887831815,
32768 * -0.006073446087034201,
32768 * -0.007944275329039591,
32768 * -0.008730471861073754,
32768 * -0.008631456140942566,
32768 * -0.007872457225367549,
32768 * -0.006682353096065401,
32768 * -0.005274420013505222,
32768 * -0.003831403853944678,
32768 * -0.002495726881851386,
32768 * -0.001365025935321373,
32768 * -0.000492652021381674,
 32768 * 0.000107696369669602,
 32768 * 0.000454344728610765,
 32768 * 0.000588303656370461,
 32768 * 0.000563490024849695,
 32768 * 0.000437625073319731,
 32768 * 0.000264669719892816,
 32768 * 0.000089341296246813,
32768 * -0.000056074230271554,
32768 * -0.000152703473123136,
32768 * -0.000194192603135482,
32768 * -0.000184435540147589,
32768 * -0.000134493912294045,
32768 * -0.000059270828489363,
 32768 * 0.000025577166651997,
 32768 * 0.000106131238080678,
 32768 * 0.000171895191538720,
 32768 * 0.000216614422927078,
 32768 * 0.000238298892089606,
 32768 * 0.000238616059705395,
 32768 * 0.000221874643623987,
 32768 * 0.000193833620412525,
 32768 * 0.000160548616877047,
 32768 * 0.000127419345527899,
 32768 * 0.000098538788403408,
 32768 * 0.000076379252403442,
 32768 * 0.000061792371041566,
 32768 * 0.000054256886673264,
 32768 * 0.000052283389470937,
 32768 * 0.000053879404156665,
 32768 * 0.000056988646083056,
 32768 * 0.000059840218384044,
 32768 * 0.000061171333691145,
 32768 * 0.000060315253051647,
 32768 * 0.000057169940256410,
 32768 * 0.000052079368355834,
 32768 * 0.000045667192682975,
 32768 * 0.000038662001548111,
 32768 * 0.000031746271051829,
 32768 * 0.000025449985498166,
 32768 * 0.000020097377056568,
 32768 * 0.000015803848788176,
 32768 * 0.000012511679326999,
 32768 * 0.000010048512760359,
 32768 * 8.191985253746450E-6,
 32768 * 6.726467770601830E-6,
 32768 * 5.482664216555230E-6,
 32768 * 4.356361076096000E-6,
 32768 * 3.307737640558170E-6,
 32768 * 2.346388649814580E-6,
 32768 * 1.509095198610040E-6,
 32768 * 837.3757902950240E-9,
 32768 * 360.3162611526540E-9,
 32768 * 85.72623910271290E-9
 };

int a0history = 0;

Encoder frequencyEncoder(30, 29);
long oldPosition = 0;
uint64_t lastMultiplier = 0;

#define BAND_START 7000000
#define BAND_END 14350000
volatile long currentFrequency = BAND_START;
long oldFrequency = -1;

#define CURSOR_START 9
int cursorPosition = CURSOR_START;
long radix = 100;

#define DISPLAY_MODE_FREQ 1
#define DISPLAY_MODE_CURSOR 2
int displayMode = DISPLAY_MODE_FREQ;
long lastTimeFreqChanged = 0;

void setup() 
{
  
  Serial.begin(9600); // start the serial monitor link
  Serial.println("Starting...");

  u8x8.begin();
  u8x8.setPowerSave(0);

  pinMode(28, INPUT_PULLUP );
  changeRadix.attach( 28 );
  changeRadix.interval( 10 );

  pinMode(27, INPUT_PULLUP );
  changeBand.attach( 27 );
  changeBand.interval( 10 );

  pinMode(24, OUTPUT);     
  pinMode(25, OUTPUT);     
  pinMode(26, OUTPUT);     

  AudioMemory(160);
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.8);
  sgtl5000_1.inputSelect(AUDIO_INPUT_LINEIN);

  amp.gain( 10 );
  plus45.begin(plus45Coeffs, NUM_COEFFS);
  minus45.begin(minus45Coeffs, NUM_COEFFS);

  bool i2c_found = si5351.init(SI5351_CRYSTAL_LOAD_8PF, 0, 0);
  si5351.drive_strength(SI5351_CLK0, SI5351_DRIVE_2MA);
  si5351.drive_strength(SI5351_CLK2, SI5351_DRIVE_2MA);

  changeFrequency( 0 );
  checkFrequencyChange();

  bandActivate();

  a0history = analogRead(A0);

}



// the loop routine runs over and over again forever:
void loop() 
{

  changeBand.update();
  int value = changeBand.read();

  if ( value != oldBand ) {
    oldBand = value;

    if ( value == 0 )
      changeActiveBand();
  }

  changeRadix.update();
  value = changeRadix.read();

  if ( value != oldRadix ) {
    oldRadix = value;

    if ( value == 0 )
      changeDisplayMode();
  }
  
  long newPosition = frequencyEncoder.read();
  if (newPosition != oldPosition && newPosition % 4 == 0 ) 
  {
    changeDisplay( newPosition > oldPosition ? 1 : -1 );
    oldPosition = newPosition;
  }
  
  value = analogRead( A0 );
  if (value > a0history + 50 || value < a0history - 50) 
  {
      a0history = value; 
      amp.gain( value / 50 );
  }

  checkFrequencyChange();
}


void changeDisplayMode()
{
  if (displayMode == DISPLAY_MODE_FREQ )
    displayMode = DISPLAY_MODE_CURSOR;
  else
    displayMode = DISPLAY_MODE_FREQ;
  changeDisplay( 0 );
}   


void changeDisplay( int direction )
{
  if (displayMode == DISPLAY_MODE_FREQ )
    changeFrequency( direction );
  else
    changeCursor( direction );
}

void changeCursor( int direction )
{
  int oldCursor = cursorPosition;
  
  cursorPosition += direction;
  if ( cursorPosition == 6 || cursorPosition == 2 )
    cursorPosition += direction;

  if (cursorPosition < 1 )
    cursorPosition = 1;
  if (cursorPosition > CURSOR_START )
    cursorPosition = CURSOR_START;

  //lcd.setCursor( cursorPosition, 0 );
  //lcd.cursor();

  if ( oldCursor != cursorPosition )
  {
    oldCursor = cursorPosition;
    if ( direction > 0 )
      radix /= 10;
    else
      radix *= 10;
  }
}


void changeFrequency( int direction )
{
  long newFrequency = currentFrequency + direction * radix;

  if ( newFrequency < BAND_START || newFrequency > BAND_END )
    return;

  currentFrequency = newFrequency;

  char cFrequency[20];
  int mhz = currentFrequency / 1000000;
  int khz = ( currentFrequency - mhz * 1000000 ) / 1000;
  int hz = currentFrequency % 1000;
  
  sprintf( cFrequency, "%2d,%03d.%03d V1.10", mhz, khz, hz );
  u8x8.setFont(u8x8_font_chroma48medium8_r);
  u8x8.drawString(0, 0, cFrequency );

}

void checkFrequencyChange()
{
  long currentTime = millis();

  if ( currentFrequency == oldFrequency )
    return;

  uint64_t mult;
  
  if ( currentFrequency < 8000000 )
  mult = 100;
  else if ( currentFrequency < 11000000 )
  mult = 80;
  else if ( currentFrequency < 15000000 )
  mult = 50;
  
  oldFrequency = currentFrequency;
  uint64_t freq = currentFrequency * 100ULL;
  uint64_t pllFreq = freq * mult;

  si5351.set_freq_manual(freq, pllFreq, SI5351_CLK0);
  si5351.set_freq_manual(freq, pllFreq, SI5351_CLK2);

  if ( lastMultiplier != mult )
  {
  si5351.set_phase(SI5351_CLK0, 0);
  si5351.set_phase(SI5351_CLK2, mult);
  si5351.pll_reset(SI5351_PLLA);
  lastMultiplier = mult;
  }

}

void changeActiveBand()
{
  activeBand = (activeBand+1) % 3;
  bandActivate();
}

void bandActivate()
{
    Serial.print("Band: ");
    Serial.println(activeBand);

  if ( activeBand == 0 )
  {
    digitalWrite(24, HIGH);
    digitalWrite(25, LOW);
    digitalWrite(26, LOW);
  }
  else if ( activeBand == 1 )
  {
    digitalWrite(24, LOW);
    digitalWrite(25, HIGH);
    digitalWrite(26, LOW);
  }
  else
  {
    digitalWrite(24, LOW);
    digitalWrite(25, LOW);
    digitalWrite(26, HIGH);
  }
  
}
